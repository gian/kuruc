(******************************************************************************
* The Kuruc Compiler (http://www.kuru-lang.org)
* Copyright (c) 2010-2013, Gian Perrone
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
* - Redistributions of source code must retain the above copyright notice, this
*   list of conditions and the following disclaimer.
*
* - Redistributions in binary form must reproduce the above copyright notice,
*   this list of conditions and the following disclaimer in the documentation
*   and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
* LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*******************************************************************************
*  This file:
*    Definition of the grammar for KuPEG grammar files. 
*
*  Based on peg-bootstrap by Kragen Javier Sitaker 
*     http://github.com/kragen/peg-bootstrap
*  Ported to Kuru (with new primitives and syntax) by Gian Perrone
******************************************************************************)

fun kupeg_join l = String.concatWith "" l

%name KupegParser
%start sentence

datatype ast = 
   Rule of string * ast
 | Choice of ast * ast
 | Sequence of ast * ast
 | Literal of string
 | Nonterm of string
 | Negation of ast
 | Result of string
 | Label of string * ast
 | Star of ast
 | Plus of ast
 | Null

%nonterm sp of string
%nonterm _ of string
%nonterm rule of ast
%nonterm sentence of ast list
%nonterm meta of string
%nonterm name of string
%nonterm namechar of string
%nonterm termfrag of ast
%nonterm term of ast
%nonterm nonterminal of ast
%nonterm labeled of ast
%nonterm sequence of ast
%nonterm string of ast
%nonterm stringcontents of string
%nonterm choice of ast
%nonterm negation of ast
%nonterm result_expression of ast
%nonterm expr of string
%nonterm exprcontents of string
%nonterm parenthesized of ast

val kplineNum = ref 0 
val kpfileName = ref "__dummy__"

%%
sp <- " " / "\n" / "\t".
_  <- sp _ / .

rule    <- n: name _ "<-"_ body: choice "."_ ->
               ((Rule($n,$body)))
           .
sentence <- _ r: rule g: sentence -> ($r :: $g)
          / _ r: rule -> ($r :: [])
          .

meta     <- "!" / "\"" / "<-" / "/" / "." / "(" / ")" /
            ":" / "->" / "*" / "+".
name     <- c: namechar n: name -> ($c ^ $n) / namechar.
namechar <- !meta !sp char.
termfrag <- labeled / nonterminal / string / negation / parenthesized.
term <- t: termfrag "*" -> (Star($t))
      / t: termfrag "+" -> (Plus($t))
      / t: termfrag     -> ($t).

nonterminal <- n: name _ ->
                   (Nonterm ($n))
             .

labeled <- label: name _ ":"_ value: term ->
               (Label($label,$value))
         .

sequence <- foo: term  bar: sequence -> 
                   (Sequence($foo, $bar))
          / result_expression 
          / -> (Null)
          .
string <- "\"" s: stringcontents "\""_ ->
             (Literal ($s))
        .

stringcontents <-   !"\\" !"\"" c: char  s: stringcontents -> 
                    ($c ^ $s)
                / b: "\\"       c: char  s: stringcontents -> 
                    ($b ^ $c ^ $s)
                / -> ("").
choice <- a: sequence "/"_  b: choice ->
                  (Choice($a,$b))
              / sequence.
negation <- "!"_ t: term ->
                (Negation ($t))
          .
result_expression <- "->"_ result: expr _ ->
                         (Result ($result))
                   .
expr         <- "("_ e: exprcontents ")" -> ("(" ^ $e ^ ")").
exprcontents <- c: (!"(" !")" char / expr)  e: exprcontents -> 
                                            ($c ^ $e)
              / -> ("").
parenthesized <- "("_ body: choice ")"_ -> (($body)).

